import msystem;
use CString,CRegex,CJson;

module String{

	def StoN:$arg1
	{
		return CString.StoN($arg1);
	}

	def Length:$arg1
	{
		return CString.Length($arg1);
	}

	def IndexOf:$arg1,$arg2
	{
		return CString.IndexOf($arg1,$arg2);
	}

	def Replace:$arg1,$arg2,$arg3
	{
		return CString.Replace($arg1,$arg2,$arg3);
	}

	def Toupper:$arg1
	{
		return CString.Toupper($arg1);
	}

	def Tolower:$arg1
	{
		return CString.Tolower($arg1);
	}

	def Isdigit:$arg1
	{
		if(typeof("$arg1")=="M_NUMBER"){
			return true;
		}
		if(typeof("$arg1")=="M_STRING"){
			return false;
		}
		return CString.Isdigit($arg1);
	}

	def Isalpha:$arg1
	{
		if(typeof("$arg1")=="M_NUMBER"){
			return false;
		}
		if(typeof("$arg1")!="M_STRING"){
			return false;
		}
		return CString.Isalpha($arg1);
	}
	def Chr:$i
	{
		if(typeof($i)!="M_NUMBER"){
			return null;
		}
		return CString.Toascii($i);
	}
	def SubString:$str,$pos1,$pos2
	{
		var $ret="";
		while($pos1<$pos2)
		{
			$ret+=$str[$pos1];
			$pos1+=1;
		}
		return $ret;
	}
	def Split:$str,$s
	{
		var $_arr=[],$i=0,$len =Length($str),$startpos=0,$slen = Length($s);
		while($i<$len)
		{ 
			var $temppos=$i+$slen;
			if($temppos>=$len){
				$temppos=$len-1;
				$_arr+= SubString($str,$startpos,$len);
				break;
			}
			var $_s = SubString($str,$i,$temppos);
			if($_s==$s)
			{
				$_arr+= SubString($str,$startpos,$i);			
				$i=$startpos=$temppos;
				continue;
			}
			$i+=1;
		}
		return $_arr;
	}

	def UTF8ToGBK:$arg1
	{
		return CString.UTF8ToGBK($arg1);
	}

	def GBKToUTF8:$arg1
	{
		return CString.GBKToUTF8($arg1);
	}
	def ToArray:$arr
	{
		var $_arr = [];
		for(var $i in $arr)
		{
			$_arr+=$i;
		}
		return $_arr;
	}
	def Trim:$str
	{
		var $_str="";
		for(var $i in $str)
		{
			if($i!=" ")
			{
				$_str+=$i;
			}		
		}
		return $_str;
	}
	def Insert:$str,$str2,$index
	{
		var $_str="",$i=0;
		while($i<Length($str))
		{ 
			if($i==$index)
			{
				$_str+=$str2;
			}
			$_str+=$str[$i];
			$i+=1;
		}
		return $_str;
	}
	def PadLeft:$str,$str2,$c
	{
		var $_str = $str,$i=0;
		while($i<$c)
		{
			$_str+=$str2;
			$i+=1; 
		}
		return $_str;
	}
	def PadRight:$str,$str2,$c
	{
		var $_str ="",$i=0;
		while($i<$c)
		{
			$_str+=$str2;
			$i+=1; 
		}
		return $_str+$str;
	}
}

module Regex
{
	def Exec:$arg1,$arg2,$arg3
	{
		if(typeof("$arg3")!="M_NUMBER")
		{
			$arg3 = 0;
		}
		return CRegex.Exec($arg1,$arg2,$arg3);
	}

	def Test:$arg1,$arg2,$arg3
	{
		if(typeof("$arg3")!="M_NUMBER")
		{
			$arg3 = 0;
		}
		return CRegex.Test($arg1,$arg2,$arg3);
	}

	def Replace:$arg1,$arg2,$arg3,$arg4
	{
		if(typeof("$arg4")!="M_NUMBER")
		{
			$arg4 = 0;
		}
		return CRegex.Replace($arg1,$arg2,$arg3,$arg4);
	}
}

module Json
{
	def JsonParse:$arg1
	{
	   return CJson.JsonParse($arg1);
	}

	def GetObjectItem:$arg1,$arg2
	{
	   return CJson.GetObjectItem($arg1,$arg2);
	}

	def GetArrayItem:$arg1,$arg2
	{
	   return CJson.GetArrayItem($arg1,$arg2);
	}

	def GetArraySize:$arg1
	{
	   return CJson.GetArraySize($arg1);
	}

	def Delete:$arg1
	{
	   return CJson.Delete($arg1);
	}

	def Type:$arg1
	{
	   return CJson.Type($arg1);
	}
}