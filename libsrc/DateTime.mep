import msystem;
import string;
use CDateTime,Regex;
module DateTime
{
	var const @datetimeinst =mmrt(CDateTime);
	var const @regextimeinst =mmrt(Regex);
	def CurrentDate:
	{
		return @datetimeinst.CurrentDate();
	}
	def CurrentTime:
	{
		return @datetimeinst.CurrentTime();
	}
	def TimeZone:
	{
		return @datetimeinst.TimeZone();
	}
	def AddDays:$datetime,$v
	{
		if(@regextimeinst.Test($datetime,"^\d{4}-\d{1,2}-\d{1,2}$"))
		{
			$datetime+=" 0:0:0";
			return @datetimeinst.AddSeconds($datetime,$v);
		}
		if(@regextimeinst.Test($datetime,"^\d{4}-\d{1,2}-\d{1,2}\s{1,}\d{1,2}:\d{1,2}:\d{1,2}$"))
		{
			return @datetimeinst.AddDays($datetime,$v);
		}
		return "The first is not datetime type";
	}
	def AddHours:$datetime,$v
	{
		if(@regextimeinst.Test($datetime,"^\d{4}-\d{1,2}-\d{1,2}$"))
		{
			$datetime+=" 0:0:0";
			return @datetimeinst.AddSeconds($datetime,$v);
		}
		if(@regextimeinst.Test($datetime,"^\d{4}-\d{1,2}-\d{1,2}\s{1,}\d{1,2}:\d{1,2}:\d{1,2}$"))
		{
			return @datetimeinst.AddHours($datetime,$v);
		}
		return "The first is not datetime type";
	}
	def AddMinutes:$datetime,$v
	{
		if(@regextimeinst.Test($datetime,"^\d{4}-\d{1,2}-\d{1,2}$"))
		{
			$datetime+=" 0:0:0";
			return @datetimeinst.AddSeconds($datetime,$v);
		}
		if(@regextimeinst.Test($datetime,"^\d{4}-\d{1,2}-\d{1,2}\s{1,}\d{1,2}:\d{1,2}:\d{1,2}$"))
		{
			return @datetimeinst.AddMinutes($datetime,$v);
		}
		return "The first is not datetime type";
	}
	def AddSeconds:$datetime,$v
	{
		if(@regextimeinst.Test($datetime,"^\d{4}-\d{1,2}-\d{1,2}$"))
		{
			$datetime+=" 0:0:0";
			return @datetimeinst.AddSeconds($datetime,$v);
		}
		if(@regextimeinst.Test($datetime,"^\d{4}-\d{1,2}-\d{1,2}\s{1,}\d{1,2}:\d{1,2}:\d{1,2}$"))
		{
			return @datetimeinst.AddSeconds($datetime,$v);
		}
		return "The first is not datetime type";
	}
	def AddYears:$datetime,$v
	{
		if(@regextimeinst.Test($datetime,"^\d{4}-\d{1,2}-\d{1,2}$"))
		{
			$datetime+=" 0:0:0";
			return @datetimeinst.AddSeconds($datetime,$v);
		}
		if(@regextimeinst.Test($datetime,"^\d{4}-\d{1,2}-\d{1,2}\s{1,}\d{1,2}:\d{1,2}:\d{1,2}$"))
		{
			return @datetimeinst.AddYears($datetime,$v);
		}
		return "The first is not datetime type";
	}
}


